CONTAINER, DEPENDENCY, AND IOC
1. What is dependency injection and what are the advantages?
ANS: Instead of creating their dependency by themselves, objects are given their dependency at runtime.
     loosely coupled, more reusable code, more testable code, easier to refactor, more readable dependency relationships.

2. What is an interface and what are the advantages of making use of them in Java?
ANS: Interface is a contract which is used to define the methods that its concrete class must implement.
     Polymorphism, change underlying implements easily, flexible code, multiple inheritance,
       clients can use a set of method without knowing their implementation.

3. What is meant by “application-context” and how do you create one?
ANS: application context loads bean definitions and wires them together.
     new its implementation depending on how it loads its configuration.
     AnnotationConfigApplicationContext
     AnnotationConfigWebApplicationContext
     ClassPathXmlApplicationContext
     FileSystemXmlApplicationContext
     XmlWebApplicationContext

4. What is the concept of a “container” and what is its lifecycle?
ANS: "container" is a component that can contain other components inside it.
     BeanFactory and ApplicationContext interface.

Bean lifecycle:
1 Spring instantiates the bean.
2 Spring injects values and bean references into the bean’s properties.
3 If the bean implements BeanNameAware, Spring passes the bean’s ID to the set-
BeanName() method.
4 If the bean implements BeanFactoryAware, Spring calls the setBeanFactory()
method, passing in the bean factory itself.
5 If the bean implements ApplicationContextAware, Spring calls the set-
ApplicationContext() method, passing in a reference to the enclosing application
context.
6 If the bean implements the BeanPostProcessor interface, Spring calls its post-
ProcessBeforeInitialization() method.
7 If the bean implements the InitializingBean interface, Spring calls its after-
PropertiesSet() method. Similarly, if the bean was declared with an initmethod,
then the specified initialization method is called.
8 If the bean implements BeanPostProcessor, Spring calls its postProcess-
AfterInitialization() method.
9 At this point, the bean is ready to be used by the application and remains in the
application context until the application context is destroyed.
10 If the bean implements the DisposableBean interface, Spring calls its
destroy() method. Likewise, if the bean was declared with a destroy-method,
the specified method is called.

5. Dependency injection using annotations (@Component, @Autowired)
ANS: @Component to indicate classes as a component class, and inform Spring container to create bean for it. (= @Named)
     @Component to enable component scanning in Spring
     @Autowired to indicate Spring should find other beans in application context to match the bean's dependency.(= @Inject)

6. Dependency injection using Java configuration
ANS: type-safe, refactor-friendly
     @Configuration to indicate a configuration class which contains details on beans
     @Bean to indicate the method will return an object that should be registered as a bean in application context.
           by default, bean ID as the method name

11. What does the @Bean annotation do?
ANS:

12. What is the default bean id if you only use "@Bean"?
ANS: method name

8. What are the advantages of JavaConfig? What are the limitations?
ANS: type-safe, object oriented config, refactor-friendly, reduce XML;
     limitation: boilerplate code while wiring some components

7. Dependency injection in XML, using constructor or setter injection
ANS: using the spring-beans schema as the root namespace of the XML file.
     <beans> as the root element of any Spring configuration,
     <bean> same as @Bean, using the fully qualified class name as class attribute, id as the name(def: #0 -)
     <constructor-arg> or c-namespace for constructor injection. ref / value
     <property> p-namespace for setter injection. name value/ref

9. Why are you not allowed to annotate a final class with @Configuration?
ANS: Spring creates dynamic proxies for classes annotated with @Configuration by extending them using CGLIB,
     so Java Configuration class can not be final.

13. Why are you not allowed to annotate final methods with @Bean?
ANS: As the restriction of usage of CGLIB, @Configuration class and its factory methods
     must not be marked as final or private.

10. Why must you have a default constructor in your @Configuration annotated class?
ANS: Prior to Spring 4, it is required to have a default constructor,
     as it is a candidate for component-scanning but do not have constructor level autowiring.

11. Scopes for Spring beans. What is the default?
ANS: Scopes are singleton, prototype, session, request, global, session and application.
     singleton is the default one.
     scope attribute in XML, or @Scope

• What is the role of the @PostConstruct and @PreDestroy annotations? When will
they get called?
ANS: Spring uses these annotation to trigger init and destroy methods inside beans.
     @PostConstruct method will be called after dependency injection.
     @PreDestroy method will be called before destroying the bean instance.
     same as init-method and destroy-method as <bean> attributes

• What is an initialization method and how is it declared in a Spring bean?
• What is a destroy method, how is it declared and when is it called?

• How do you enable JSR-250 annotations like @PostConstruct?
ANS: <context-annotation-config> will active them
     @Configuration will scan them

• What is a BeanFactoryPostProcessor and what is it used for?
ANS: it is used for changing a bean definition before it is created in Application Context.
     like PropertyPlaceholderConfigurer

• What is a BeanPostProcessor and how is the difference to a
BeanFactoryPostProcessor? What do they do? When are they called?
ANS: BeanPostProcessor is for making additional configuration to beans such as before or after properties set.
     BeanFactoryPostProcessor is for changing the bean definition;
     BeanPostProcessor is for making additional configuration after beans are created in AC.

• What is a proxy object and what are the two different types of proxies Spring can
create?
ANS: Proxy object are added behaviors to a bean through BeanPostProcessors in Spring.
     JDK Dynamic proxy by implementing interfaces; AOP(CGLIB)

• What is the power of a proxy object and where are the disadvantages?
ANS: do not change the actual bean's logic

• What are the limitations of these proxies (per type)?
ANS: JDK Dynamic proxy requires implementing interface which will change the actual object with new implementation.
     CGLIB uses subclassing for creating proxies, thus methods can not be final.

• Can you use @Bean together with @Profile?
ANS: JUnit @ActiveProfiles(profile = "..")
     <beans profile = "..">

• How do you configure a profile. What are possible use cases where they might be
useful?
ANS: different beans for production, test

• How many profiles can you have?

• What is Spring Expression Language (SpEL for short)?
ANS: it supports querying and changing the objects at runtime.

• What is a PropertyPlaceholderConfigurer used for?
ANS: PropertyPlaceholderConfigurer resolve ${} placeholder in local properties, sytem properties and environment variables.
     to configure: <context:property-placeholder location = "classpath:...">
     @Bean public static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
         return new PropertySourcesPlaceholderConfigurer();
     }


3.
• Component scanning, Stereotypes and Meta-Annotations




• Are beans lazily or eagerly instantiated by default? How do you alter this behavior?
• What does component-scanning do?
• What is the behavior of the annotation @Autowired with regards to field injection,
constructor injection and method injection?
• How does the @Qualifier annotation complement the use of @Autowired?



• How do you inject scalar/literal values into Spring beans?
• How are you going to create a new instance of an ApplicationContext?
• What is a prefix?
• What is the lifecycle on an ApplicationContext?

• How are you going to create an ApplicationContext in an integration test or a JUnit
test?
• What do you have to do, if you would like to inject something into a private field?




• What is the environment abstraction in Spring?
• What can you reference using SpEL?





• What is the preferred way to close an application context?
• How can you create a shared application context in a JUnit test?
• What does a static @Bean method do?

• What is @Value used for?
• What is the difference between $ and # in @Value expressions?