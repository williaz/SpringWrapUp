SPRING MVC AND THE WEB LAYER:

1. What are you going to do in the web.xml. Where do you place it?
ANS: web.xml file is placed under WEB-INF folder to configure a web application based on Java EE.
     we configure DispatcherServlet and ContextLoaderListener in web.xml to activate Spring MVC component.

2. MVC is an abbreviation for a design pattern. What does it stand for and what is the
idea behind it?
ANS: MVC stands for Model-View-Controller, it is a design pattern used mostly in web application.
     It separates the business logic from other layers such as user interface and controller.
     The model layer consists business logic; The view layer renders the information from the model layer.
     The controller receives user input, redirects the flow to model layer and calls view layer to display data.

3. Do you need spring-mvc.jar in your classpath or is it part of spring-core?
ANS: Yes, we need spring-webmvc.jar in the library (WEB-INF/lib folder) of the web application.
     It is not part of spring-core.jar.

4. What is the DispatcherServlet and what is it used for?
ANS: DispatcherServlet is the front controller to dispatch HTTP request to registered controllers based on UR pattern.
     Coordinates all requests and return related view to users.

5. Is the DispatcherServlet instantiated via an application context?
ANS: DispatcherServlet is instantiated by a HTTP request based on URL mapping. it uses ac.
     ApplicationCOntext is instantiated before DispatcherServlet by defining a contextConfigLocation in web.xml.
     DispatcherServlet can access ApplicationContext's beans through xml/java configuration or autowiring with annotation.

6. What is the root application context? How is it loaded?
ANS: to prepare the web application. It is used to create application's services such as business component and DAO.

7. What is the ContextLoaderListener and what does it do?
ANS: ContextLoaderListener will inject root application context into the ServletContext before creating other servlets.
     Thus we can access root application context in any servlet. We can configure it in web.xml.

8. What is the @Controller annotation used for? How can you create a controller without an annotation?
ANS: @Controller annotation is used for defining a request handler class in Spring MVC.
     It is used in combination with @RequestMapping annotation to map a HTTP request to a method with its request parameters.
     Yes, extends AbstractController, and use XML to configure it.

9. How is an incoming request mapped to a controller and mapped to a method?
ANS: @RequestMapping maps incoming request to a controller class or a handler method.

10. What are some of the valid return types of a controller method?
ANS: ModelAndView, Model, Map, View, String, void, HttpHeader...

11. Why are controllers testable artifacts?
ANS: we write Spring controller class as Plain java class, so it is easy to test its methods.
     we don't need to deploy it on the application servers.
     If the controllers have a reference to a HttpSession or HttpRequest object, we can use mock object to test it.

12. What is the @RequestParam used for?
ANS: @RequestParam bounds a method parameter to a web request parameter.

13. What are the differences between @RequestParam and @PathVariable?
ANS: @RequestParam used for accessing the values of the query parameters;
     @PathVariable used for accessing the values from URI template.

14. What is a View and what's the idea behind supporting different types of View?
ANS: View is responsible for rendering the content returned from Spring MVC, It can access multiple model object in it.
     Spring supports different types of view configuration by configuring ViewResolver.
     ViewResolver chooses the right view like JSP, XSLT.

15. What does the InternalResourceViewResolver do?
    How is the right View chosen when it comes to the rendering phase?
ANS: InternalResourceViewResolver helps map the logical view names to view files
     under a certain pre-configuration directory

16. What is the Model?
ANS: Model is an interface in Spring defining a holder for model attributes you want to display on the view.
     methods: addAttribute(), asMap(), containsAttribute(), addAllAttributes();

17. Why do you have access to the model in your View? Where does it come from?
ANS: DispatcherServlet send the model object to InternalViewResolver.

18. What is the purpose of the session scope?
ANS: The purpose of the session scope is to store an object in HTTP session to reuse it before session timeout or logout.
     @Scope("session") can be applied to POJOs or controllers.
     Controllers can also define a HttpSession as a parameter on method level.

19. What is the default scope in the web context?
ANS: The default scope in the web context is Request scope.
     a single bean is created during the lifecycle of single HTTP request from users.

//TODO: sqrt common page - jsp
//TODO: sqrt services - REST and jQuery


