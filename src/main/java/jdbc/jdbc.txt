JDBC, TRANSACTIONS, AND ORM
• What is the difference between checked and unchecked exceptions?
ANS: Checked Exceptions are checked during Compile time and programmer should handle or declare them.
     Unchecked Exceptions are runtime exceptions

• Why do we (in Spring) prefer unchecked exceptions?
ANS: If a SQLException is thrown, there is not a lot you can do, so Spring eliminate those try-catch boilerplate code.

• What is the data access exception hierarchy?
ANS: DataAccessException is the root of the hierarchy of data access exceptions

• How do you configure a DataSource in Spring? Which bean is very useful for
development/test databases?
ANS: declare a bean for it. BasicDataSource/DriverManagerDataSource for development, jndi for test/live

• What is the Template design pattern and what is the JDBC template?
ANS: Template allows subclass to redefine the functionality without changing he actual workflow.

• What is a callback? What are the three JdbcTemplate callback interfaces described
in the notes? What are they used for? (You would not have to remember the
interface names in the exam, but you should know what they do if you see them in
a code sample).
• Can you execute a plain SQL statement with the JDBC template?
• Does the JDBC template acquire (and release) a connection for every method
called or once per template?
• Is the JDBC template able to participate in an existing transaction?
• What is a transaction? What is the difference between a local and a global
transaction?
• Is a transaction a cross cutting concern? How is it implemented in Spring?
• How are you going to set up a transaction in Spring?
• What does @Transactional do? What is the PlatformTransactionManager?
• What is the TransactionTemplate? Why would you use it?
• What is a transaction isolation level? How many do we have and how are they
ordered?
• How does the JdbcTemplate support generic queries? How does it return objects
and lists/maps of objects?
• What does transaction propagation mean?
• What happens if one @Transactional annotated method is calling another
@Transactional annotated method on the same object instance?
• Where can the @Transactional annotation be used? What is a typical usage if you
put it at class level?
• What does declarative transaction management mean?
• What is the default rollback policy? How can you override it?
• What is the default rollback policy in a JUnit test, when you use the
SpringJUnit4ClassRunner and annotate your @Test annotated method with
@Transactional?
• Why is the term "unit of work" so important and why does JDBC AutoCommit
violate this pattern?
• What does JPA mean - what is ORM? What is the idea behind an ORM?
• What is a PersistenceContext and what is an EntityManager. What is the
relationship between both?
• Why do you need the @Entity annotation. Where can it be placed?
• What do you need to do in Spring if you would like to work with JPA?
• Are you able to participate in a given transaction in Spring while working with JPA?
• What is the PlatformTransactionManager?
• What does @PersistenceContext do?
• What are disadvantages or ORM? What are the benefits?
• What is an "instant repository"? (hint: recall Spring Data)
• How do you define an “instant” repository?
• What is @Query used for?